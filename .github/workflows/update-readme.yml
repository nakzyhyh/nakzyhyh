# .github/workflows/update-readme.yml
name: üîÑ README mit Community-Feedback aktualisieren

# Definiert die Berechtigungen, die dem GITHUB_TOKEN f√ºr diesen Workflow gew√§hrt werden.
# 'contents: write' ist notwendig, um die README.md zu √§ndern und zu pushen.
permissions:
  contents: write

on:
  # L√§uft automatisch alle 30 Minuten.
  schedule:
    - cron: '*/30 * * * *'
  # Erlaubt das manuelle Starten des Workflows √ºber die GitHub UI.
  workflow_dispatch:

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      # ----------------------------------------------------------------
      # Schritt 1: Repository auschecken
      # ----------------------------------------------------------------
      # Klont dein Repository in den Runner.
      # persist-credentials: true ist entscheidend, damit der GITHUB_TOKEN
      # f√ºr sp√§tere Git-Operationen (wie git push) verf√ºgbar bleibt.
      - name: ‚¨áÔ∏è Repository auschecken
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      # ----------------------------------------------------------------
      # Schritt 2: Dynamischen Feedback-Block erstellen
      # ----------------------------------------------------------------
      # Ruft die neuesten 5 offenen Issues mit dem Label 'feedback' ab
      # und formatiert sie als Markdown-Liste.
      - name: üìù Feedback-Block generieren
        id: feedback_generator
        run: |
          FEEDBACK_CONTENT=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues?labels=feedback&state=open&per_page=5&sort=created&direction=desc" | \
            jq -r '.[] | "- [#" + (.number|tostring) + "](" + .html_url + ") ‚Äì " + .title')

          if [[ -z "$FEEDBACK_CONTENT" ]]; then
            FEEDBACK_CONTENT="*Aktuell liegen keine offenen Feedback-Vorschl√§ge vor.*"
          fi
          
          # Multiline-String f√ºr die Ausgabe vorbereiten
          {
            echo "content<<EOF"
            echo ""
            echo "## üí¨ Community-Feedback & Ideen"
            echo ""
            echo "Haben Sie eine Idee f√ºr ein neues Feature oder eine Frage zu meinen Projekten? Ich freue mich √ºber jeden Input! Erstellen Sie einfach ein **[neues Issue](https://github.com/${{ github.repository }}/issues/new/choose)** und versehen Sie es mit dem \`feedback\`-Label."
            echo ""
            echo "### üîÑ Neueste Feedback-Ideen:"
            echo "$FEEDBACK_CONTENT"
            echo ""
            echo "*Wird alle 30 Minuten automatisch aktualisiert‚Ä¶*"
            echo ""
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # ----------------------------------------------------------------
      # Schritt 3: README.md mit dem neuen Block aktualisieren
      # ----------------------------------------------------------------
      # Verwendet 'awk', um den Inhalt zwischen den Markern zu ersetzen.
      # Dies ist eine robuste Methode, die keine zus√§tzlichen Actions ben√∂tigt.
      - name: ‚úèÔ∏è README.md aktualisieren
        run: |
          awk '
            BEGIN {
              # Lese den neuen Inhalt aus der Umgebungsvariable
              new_content = ENVIRON["NEW_CONTENT"]
              # Entferne die umschlie√üenden Marker aus dem Inhalt selbst
              gsub(/^\n/, "", new_content)
              gsub(/\n$/, "", new_content)
              in_block = 0
            }
            /^/ {
              print
              print new_content
              in_block = 1
              next
            }
            /^/ {
              print
              in_block = 0
              next
            }
            in_block == 1 { next }
            { print }
          ' README.md > README.tmp.md && mv README.tmp.md README.md
        env:
          NEW_CONTENT: "${{ steps.feedback_generator.outputs.content }}"

      # ----------------------------------------------------------------
      # Schritt 4: √Ñnderungen committen und pushen (falls vorhanden)
      # ----------------------------------------------------------------
      # Konfiguriert Git mit einem Bot-Benutzer und pusht die √Ñnderungen.
      # Der Commit erfolgt nur, wenn 'git diff' eine √Ñnderung an der README feststellt.
      - name: üöÄ √Ñnderungen committen und pushen
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          if ! git diff --cached --quiet; then
            git commit -m "ü§ñ Chore: Community-Feedback in README aktualisiert"
            git push
          else
            echo "Keine √Ñnderungen in der README.md. Nichts zu committen."
          fi